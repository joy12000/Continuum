import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Search } from 'lucide-react';
export function SearchBar({ q, setQ, onFocus, suggestedQuestions, isLoadingSuggestions, suggestionError, }) {
    // 2. 내부 상태/로직 제거: 이 컴포넌트는 상태를 관리하거나 API를 호출하지 않습니다.
    return (_jsxs("div", { className: "p-2 bg-slate-100 dark:bg-slate-800 rounded-lg", children: [_jsxs("div", { className: "relative", children: [_jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: _jsx(Search, { className: "h-5 w-5 text-slate-400" }) }), _jsx("input", { type: "search", value: q, onChange: (e) => setQ(e.target.value), 
                        // 3. Input onFocus 연결: 부모로부터 받은 onFocus 핸들러를 연결합니다.
                        onFocus: onFocus, placeholder: "\uACFC\uAC70\uC758 \uB098\uC5D0\uAC8C \uC9C8\uBB38\uD558\uAE30...", className: "w-full p-3 pl-10 bg-white dark:bg-slate-700 rounded-md focus:ring-2 focus:ring-indigo-500 focus:outline-none transition" })] }), _jsxs("div", { className: "mt-2 text-center", children: [isLoadingSuggestions && (_jsx("div", { className: "text-sm text-slate-500 dark:text-slate-400 animate-pulse", children: "\uC9C8\uBB38 \uC81C\uC548 \uC911..." })), !isLoadingSuggestions && suggestedQuestions.length > 0 && (_jsx("div", { className: "flex flex-wrap justify-center gap-2", children: suggestedQuestions.map((question, index) => (_jsx("button", { onClick: () => setQ(question), className: "px-3 py-1 text-sm bg-indigo-100 text-indigo-700 rounded-full hover:bg-indigo-200 dark:bg-indigo-900 dark:text-indigo-300 dark:hover:bg-indigo-800 transition", children: question }, index))) })), suggestionError && !isLoadingSuggestions && (_jsx("div", { className: "text-sm text-red-500", children: suggestionError }))] })] }));
}
